import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

static String getKeystorePath() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) return "c:/Keystore/civilcam"
    if (Os.isFamily(Os.FAMILY_MAC)) return "${System.properties['user.home']}/Keystore/civilcam"
    return System.getenv("CIVILCAM_KEYSTORE_PATH")
}

def computeVersionName() {
    return "${rootProject.version_major}.${rootProject.version_minor}.${rootProject.version_patch}"
}

def computeVersionCode() {
    return rootProject.version_major * 10000 + rootProject.version_minor * 1000 + rootProject.version_patch * 100 + rootProject.build_number
}

android {
    setProperty("archivesBaseName", getArtifactName(defaultConfig))

    compileSdk rootProject.compile_sdk

    defaultConfig {
        applicationId "com.civilcam"
        minSdk rootProject.min_sdk
        targetSdk rootProject.target_sdk
        versionCode computeVersionCode()
        versionName computeVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug_config {
            try {
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
                storeFile file(getKeystorePath())
                storePassword KEYSTORE_PASSWORD
            } catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
        default_config {
            try {
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
                storeFile file(getKeystorePath())
                storePassword KEYSTORE_PASSWORD
            } catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }



    buildTypes {
        sandbox {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.default_config
        }

        production {
            minifyEnabled true
            debuggable false
            signingConfig signingConfigs.default_config
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.2.0-beta03"
    }
}

apply from: '../dependencies.gradle'

dependencies {
    androidX()

//    testImplementation 'junit:junit:4.13.2'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    jetpackCompose()
    google()
    retrofit()
    okhttp()
    paging()
    koin()
    nav()
    adapterDelegates()
    glide()
    rxJava()

    //Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    api project(":app:arch")
}